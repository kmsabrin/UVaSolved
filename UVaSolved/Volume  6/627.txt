From apache@acm.uva.es Wed Sep 29 04:42:41 2004
Received: from acm.localnet (web.localnet [192.168.10.200])
	by acm.uva.es (8.11.6/8.11.6) with ESMTP id i8T2gfW26932
	for <judge@juez.localnet>; Wed, 29 Sep 2004 04:42:41 +0200
Received: by acm.localnet (Postfix)
	id 7E863FFDC; Wed, 29 Sep 2004 04:42:41 +0200 (CEST)
Delivered-To: judge@acm.uva.es
Received: by acm.localnet (Postfix, from userid 81)
	id 7C2E7FFBF; Wed, 29 Sep 2004 04:42:41 +0200 (CEST)
To: judge@acm.uva.es
Subject: Problem 627
From: nobody@nobody.acm.uva.es
Reply-To: nobody@nobody.acm.uva.es
Message-Id: <20040929024241.7C2E7FFBF@acm.localnet>
Date: Wed, 29 Sep 2004 04:42:41 +0200 (CEST)

/* @JUDGE_ID: 34556CP 627 C++ "" */
/** Submited via Valladolid ACM Online Judge Submit page v6.00 **/
/** IP: 202.22.204.36 - CRC: 78FC5551 **/
/** Date: 2004-09-29 04:42:41 +0200 **/

@BEGIN_OF_SOURCE_CODE
#include<stdio.h>
#include<stdlib.h>
#include<string.h>

char grid[310][310];
int finalpath[310], currentpath[310], used[310];
int node, len, min, dest;

int input()
{
	char str[10000], *p;
	int i, j, k;
	memset( grid, 0, 310 * 310 );
	memset( used, 0, 310);
	if( scanf("%d", &node) == EOF ) return 0;
	for(i = 1; i <= node; ++i)
	{
		scanf("%s", str);
		j = 0;
		while( str[j++]  != '-') ;
		k = atoi( str + j );
		grid[i][k] = 1;
		p = strtok( str, ",");
		while( p = strtok( NULL, ",") )
		{
			k = atoi( p );
			grid[i][k] = 1;
		}
	}
	return 1;
}

int call( int source )
{
	int i;
	if( source == dest && ( min == -1 || len < min ))
	{
		for(i = 0; i < len; ++i)
			finalpath[i] = currentpath[i];
		min = len;
		return 0;
	}

	for( i = 1; i <= node; ++i)
		if ( !used[i] )
			if ( grid[source][i] )
			{
				used[i] = 1;
				currentpath[len++] = i;
				call ( i );

				used[i] = 0;
				len--;
			}
	return 0;
}

void printpath()
{
	int i;
	if ( min == -1 ) printf("connection impossible\n");
	else
	{
		if ( min != -1 ) printf("%d", finalpath[0]);
		for (i = 1; i < min; ++i)
			printf(" %d", finalpath[i]);
		printf("\n");
	}
	memset( used, 0, 310);
}

int main()
{
	int q, source;
	while ( input() )
	{
		printf("-----\n");
		scanf("%d", &q);
		while (q--)
		{
			scanf("%d %d", &source, &dest);
			len = 0;
			min = -1;
			used[source] = 1;
			currentpath[len++] = source;
			call( source );
			printpath();
		}
	}
	return 0;
}
@END_OF_SOURCE_CODE
