From apache@acm.uva.es Thu Mar 17 15:14:40 2005
Received: from acm.localnet (web.localnet [192.168.10.200])
	by acm.uva.es (8.11.6/8.11.6) with ESMTP id j2HEEel12182
	for <judge@juez.localnet>; Thu, 17 Mar 2005 15:14:40 +0100
Received: by acm.localnet (Postfix)
	id 356CA1136D; Thu, 17 Mar 2005 15:14:40 +0100 (CET)
Delivered-To: judge@acm.uva.es
Received: by acm.localnet (Postfix, from userid 81)
	id 33E7E1136B; Thu, 17 Mar 2005 15:14:40 +0100 (CET)
To: judge@acm.uva.es
Subject: Problem 201
From: nobody@nobody.acm.uva.es
Reply-To: nobody@nobody.acm.uva.es
Message-Id: <20050317141440.33E7E1136B@acm.localnet>
Date: Thu, 17 Mar 2005 15:14:40 +0100 (CET)

/* @JUDGE_ID: 34556CP 201 C++ "" */
/** Submited via Valladolid ACM Online Judge Submit page v6.00 **/
/** IP: 202.80.160.55 - CRC: C7E53310 **/
/** Date: 2005-03-17 15:14:40 +0100 **/

@BEGIN_OF_SOURCE_CODE
#include <stdio.h>
#include <string.h>

int main()
{
	int m, n;
	char H[9][9], V[9][9], sqr[9], tmp[3];
	int i, j, k, r, f, flg = 0, t = 1;
	//freopen( "a.in", "r", stdin );

	while ( scanf( "%d", &n ) != EOF )
	{

		if (  flg ) 
		{
			printf( "\n" );
			printf( "**********************************\n" );
			printf( "\n" );
		}
		flg = 1;


		memset( H, 0, sizeof( H ) );
		memset( V, 0, sizeof( V ) );
		scanf( "%d", &m );
		for ( i = 0; i < m; ++i )
		{
			scanf( "%s %d %d", tmp, &j, &k );
			if ( tmp[0] == 'H' )
				H[j - 1][k - 1] = 1;
			else
				V[k - 1][j - 1] = 1;
		}
		
		memset( sqr, 0, sizeof( sqr ) ) ;
		for ( i = 0; i < n; ++i )
			for ( j = 0; j < n; ++j )
				for ( k = 1; k < n; ++k )
				{
					if ( i + k >= n || j + k >= n )
						break;
					f = 1;
					for ( r = 0; r < k; ++r )
						if ( V[i + r][j] && V[i + r][j + k] &&
							 H[i][j + r] && H[i + k][j + r] )
							;
						else
						{
							f = 0;
							break;
						}
					if ( f ) sqr[k]++;
				}

		printf( "Problem #%d\n", t++ );
		printf( "\n" );
		f = 0;
		for ( i = 1; i < n; ++i )
			if ( sqr[i] )
			{
				printf( "%d square (s) of size %d\n", sqr[i], i );
				f = 1;
			}
		if ( !f )
			printf( "No completed squares can be found.\n" );
	}

	return 0;
}




@END_OF_SOURCE_CODE
