From apache@acm.uva.es Tue Apr  6 16:06:41 2004
Received: from acm.localnet (web.localnet [192.168.10.200])
	by acm.uva.es (8.11.6/8.11.6) with ESMTP id i36E6eW05604
	for <judge@juez.localnet>; Tue, 6 Apr 2004 16:06:40 +0200
Received: by acm.localnet (Postfix)
	id 34DF0109C3; Tue,  6 Apr 2004 16:06:41 +0200 (CEST)
Delivered-To: judge@acm.uva.es
Received: by acm.localnet (Postfix, from userid 81)
	id 185CC1012E; Tue,  6 Apr 2004 16:06:41 +0200 (CEST)
To: judge@acm.uva.es
Subject: Problem 291
From: nobody@nobody.acm.uva.es
Reply-To: nobody@nobody.acm.uva.es
Message-Id: <20040406140641.185CC1012E@acm.localnet>
Date: Tue,  6 Apr 2004 16:06:41 +0200 (CEST)

/* @JUDGE_ID: 34556CP 291 C++ "" */
/** Submited via Valladolid ACM Online Judge Submit page v6.00 **/
/** IP: 202.22.204.90 - CRC: 3CF70F2F **/
/** Date: 2004-04-06 16:06:40 +0200 **/

@BEGIN_OF_SOURCE_CODE
#include<stdio.h>

int  edge[6][6];  // all edges are 1, otherwise 0
int  path[10];	  // path traversed consisting of vertices
int  pos[6][6];   // 1 if an edge is possible between vertices, 0 otherwise
int  count, total;

void init()
{
	int i, j;
	count = total = 0;
	for(i = 1; i < 6; i++)
		for(j = 1; j < 6; j++)
			edge[i][j] = pos[i][j] = 0;

	// for first calling in main
	edge[0][1] = 0;
	pos[0][1] = 1;

	// possible to have an edge between vertices
	pos[1][2] = pos[1][3] = pos[1][5] = 1;
	pos[2][3] = pos[2][5] = 1;
	pos[3][4] = pos[3][5] = 1;
	pos[4][5] = 1;
}

int recursion(int from, int to)
{
	int i, f = 0;

	// checking whether an edge is possible, if not go back
	if(pos[from][to] == 0 && pos[to][from] == 0)   return 0;

	// checking whether an edge already exists, if does go back
	if(edge[from][to] == 1 || edge[to][from] == 1) return 0;

	// assigning an edge and keeping track of the path
	edge[from][to] = edge[to][from] = 1;
	f = 1;
	path[count++] = to;

	// checking whether required path has been traversed
	if(edge[1][2] && edge[1][3] && edge[1][5] && edge[2][3] && edge[2][5] && edge[3][4] && edge[3][5] && edge[4][5])
	{
		// printing the path
		for(i=0; i<count; i++)
			printf("%d",path[i]);
		printf("\n");

		// wiping the last edge to track back
		path[--count] = '\0';
		edge[from][to] = edge[to][from] = 0;
		total++;
		return 0;
	}

	// calling all existing vertex
	// the current 'to' is the next 'from'
	recursion(to, 1);
	recursion(to, 2);
	recursion(to, 3);
	recursion(to, 4);
	recursion(to, 5);

	// wiping traversed path and created edges to track back
	if(f == 1)
	{
		edge[from][to] = edge[to][from] = 0;
		path[--count] = '\0';
	}

	return 0;
}

int main()
{
	init();
	recursion(0, 1);
	//printf("tot = %d\n",total);
	return 0;
}


@END_OF_SOURCE_CODE
