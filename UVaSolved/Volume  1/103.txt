/* @JUDGE_ID: 34556CP 103 C++ "Submitted by Cd-Man's automatic submission tool ver 0.9" */
/** Date: 2004-11-20 07:33:47 +0100 **/

//#include <conio.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define Limit 200

char c[Limit][Limit];
int len, max, n;
int path[Limit], final[Limit], used[Limit];

int comp( const void *i, const void *j )
{
	return *(int *)i - *(int *)j;
}

int call( int node )
{
	int f, i;
	for ( i = f = 0; i < n; ++i )
		if( used[i] == 0 && c[node][i] )
		{
			f = 1;

			used[i] = 1;
			path[len++] = i;
			call( i );

			used[i] = 0;
			len--;
		}

	if ( f == 0 && len > max )
	{
		for ( i = 0; i < len; ++i )
			final[i] = path[i];
		max = len;
	}
	return 0;
}

int main()
{
	int a[Limit][35];
	int i, j, k, p, f;
//	freopen( "a.in", "r", stdin ); clrscr();

	while( scanf( "%d %d", &n, &k ) != EOF )
	{
	for ( i = 0; i < n; ++i )
	{
		for ( j = 0; j < k; ++j )
			scanf( "%d", &a[i][j] );
		qsort( a[i], k, sizeof(int), comp );
	}
	/*
	for ( i = 0; i < n; ++i )
	{
		for ( j = 0; j < k; ++j )
			printf( "%d ", a[i][j] );
		printf( "\n" );
	}
	*/
	memset( c, 0, Limit * Limit );
	for ( i = 0; i < n; ++i )
		for ( j = 0; j < n; ++j )
		{
			for ( p = 0, f = 1; p < k; ++p )
				if ( a[i][p] >= a[j][p] )
				{
					f = 0;
					break;
				}
			if ( f ) c[i][j] = 1;
		}
	/*
	for ( i = 0; i < n; ++i )
	{
		for ( j = 0; j < n; ++j )
			printf( "%d ", c[i][j] );
		printf( "\n" );
	}
	memset( length, 1, Limit );
	memset( predecessor, -1, Limit );
	for ( i = 0, max = 0; i < n - 1; ++i )
	{
		for ( j = i + 1; j < n; ++j )
			if ( c[i][j] )
			{
				length[j] = length[i] + 1;
				if ( length[j] > max )
					max = length[j];
				predecessor[j] = i;
			}
		for ( p = 0; p < n; ++p )
			printf( "%4d", length[p] );
		printf("\n");
		for ( p = 0; p < n; ++p )
			printf( "%4d", predecessor[p] );
		printf("\n\n");
	}
	printf( "\n%d\n", max );
	*/
	memset( used, 0, Limit * 2 );
	for ( i = max = 0; i < n; ++i )
	{
		len = 0;
		used[i] = 1;
		path[len++] = i;
		call( i );
		used[i] = 0;
	}
	printf( "%d\n", max );
	for ( i = 0; i < max - 1; ++i )
		printf( "%d ", final[i] + 1 );
	printf( "%d\n", final[max - 1] + 1 );
	}
	return 0;
}
