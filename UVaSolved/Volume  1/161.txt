From apache@acm.uva.es Fri Feb 25 15:24:35 2005
Received: from acm.localnet (web.localnet [192.168.10.200])
	by acm.uva.es (8.11.6/8.11.6) with ESMTP id j1PEOZl27900
	for <judge@juez.localnet>; Fri, 25 Feb 2005 15:24:35 +0100
Received: by acm.localnet (Postfix)
	id 26EB311343; Fri, 25 Feb 2005 15:24:35 +0100 (CET)
Delivered-To: judge@acm.uva.es
Received: by acm.localnet (Postfix, from userid 81)
	id 231A51121D; Fri, 25 Feb 2005 15:24:35 +0100 (CET)
To: judge@acm.uva.es
Subject: Problem 161
From: nobody@nobody.acm.uva.es
Reply-To: nobody@nobody.acm.uva.es
Message-Id: <20050225142435.231A51121D@acm.localnet>
Date: Fri, 25 Feb 2005 15:24:35 +0100 (CET)

/* @JUDGE_ID: 34556CP 161 C++ "" */
/** Submited via Valladolid ACM Online Judge Submit page v6.00 **/
/** IP: 202.80.160.62 - CRC: 57C1B022 **/
/** Date: 2005-02-25 15:24:34 +0100 **/

@BEGIN_OF_SOURCE_CODE
//#include <conio.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main()
{
	int a[101], c[19001];
	int i, j, k, n;
	int s;
	int oh[3], om[3], os[3], m, h, sec;
	char str[1001], *p;
//	clrscr();
//	freopen( "a.in", "r", stdin );
//	freopen( "a.out", "w", stdout );

	while ( 1 )
	{
		i = 0;
		while( gets( str ) )
		{
			p = strtok( str, " " );
			k = atoi( p );
			if ( k == 0 ) break;
				a[i++] = k;
			while ( p = strtok( NULL, " " ) )
			{
				k =  atoi( p );
				if ( k )
					a[i++] = k;
				else
					break;
			}
			if( k == 0 ) break;
		}
		n = i;
		if ( n == 0 ) break;

		memset( c, 0, sizeof( c ) );
		for ( i = 0; i < n; ++i )
		{
			s = a[i];
			k = 1;
			while ( 1 )
			{
				for ( j = 1; j <= s - 5; ++j, ++k )
						;
				for ( j = 1; j <= 5; ++j, ++k )
					c[k] = 1;
				for ( j = 1; j <= s; ++j, ++k )
					c[k] = 1;
				if ( k > 18010 ) break;
			}
		}

		for ( i = 1; c[i] == 0; ++i )
				;
		for (      ; c[i] != 0 && i <= 18001; ++i )
				;

		if ( i == 18002 )
			printf( "Signals fail to synchronise in 5 hours\n" );
		else
		{
			--i;
			h = i / 3600;
			m = ( i - h * 3600 ) / 60;
			sec = i - h * 3600 - m * 60;
			oh[0] = ( h / 10 ) % 10;
			oh[1] = h % 10;
			om[0] = ( m / 10 ) % 10;
			om[1] = m % 10;
			os[0] = ( sec / 10 ) % 10;
			os[1] = sec % 10;
			printf( "%d%d:%d%d:%d%d\n", oh[0], oh[1], om[0], om[1], os[0], os[1] );
		}

	}
	return 0;
}



@END_OF_SOURCE_CODE
