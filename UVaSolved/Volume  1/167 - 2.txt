From apache@acm.uva.es Wed Dec  1 18:12:21 2004
Received: from acm.localnet (web.localnet [192.168.10.200])
	by acm.uva.es (8.11.6/8.11.6) with ESMTP id iB1HCLp24925
	for <judge@juez.localnet>; Wed, 1 Dec 2004 18:12:21 +0100
Received: by acm.localnet (Postfix)
	id B928710276; Wed,  1 Dec 2004 18:12:20 +0100 (CET)
Delivered-To: judge@acm.uva.es
Received: by acm.localnet (Postfix, from userid 81)
	id B6D7610213; Wed,  1 Dec 2004 18:12:20 +0100 (CET)
To: judge@acm.uva.es
Subject: Problem 167
From: nobody@nobody.acm.uva.es
Reply-To: nobody@nobody.acm.uva.es
Message-Id: <20041201171220.B6D7610213@acm.localnet>
Date: Wed,  1 Dec 2004 18:12:20 +0100 (CET)

/* @JUDGE_ID: 34556CP 167 C++ "Submitted by Cd-Man's automatic submission tool ver 0.9" */
/** Submited via Valladolid ACM Online Judge Submit page v6.00 **/
/** IP: 202.80.160.60 - CRC: C8E79103 **/
/** Date: 2004-12-01 18:12:20 +0100 **/

@BEGIN_OF_SOURCE_CODE
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int used_row[8], row_in_column[8];
int board[8][8];
int current_column, count = 0;
int result[92][8];

int check_diagonal( int row, int column )
{
	int temp_row, flag = 0;
	for( temp_row = 0; temp_row < 8; temp_row++ )
	{
		if( row_in_column[temp_row] != -1 )
		{
			if( abs( column - temp_row ) == abs( row - row_in_column[temp_row] ) )
			{
				flag = 1;    // diagonally attackable
				break;
			}
		}
	}
	return flag;
}

void show()
{
	int i;
	for( i = 0; i < 8; ++i )
		result[count][i] = row_in_column[i];
	count++;
}

int place_queen()
{
	int row;
	if ( current_column == 8 ) // mission complete
	{
		show();
		return 0;
	}
	for ( row = 0; row < 8; ++row )
	{
		if( used_row[row] )
			continue;
		if( check_diagonal( row, current_column ) )
			continue;

		row_in_column[current_column] = row;
		current_column++;
		used_row[row] = 1;

		place_queen();

		current_column--;
		row_in_column[current_column] = -1;
		used_row[row] = 0;
	}
	return 0;
}

int main()
{
	int test, i, j, k, max;
	current_column = 0;
	memset( used_row, 0, 8 * sizeof(int) );
	memset( row_in_column, -1, 8 * sizeof(int) );
	for ( i = 0; i < 8; ++i )
	{
		used_row[i] = 1;
		row_in_column[current_column] = i;
		current_column++;
		place_queen();
		used_row[i] = 0;
		current_column--;
		row_in_column[current_column] = -1;
	}

	scanf( "%d", &test );
	while( test-- )
	{

		for ( i = 0; i < 8; ++i )
			for ( j = 0; j < 8; ++j )
				scanf( "%d", &board[i][j] );

		for ( i = max = 0; i < 92; ++i )
		{
			for ( j = k = 0; j < 8; ++j )
				k += board[j][result[i][j]];
			if ( k > max )
				max = k;
		}
		printf( "%5d\n", max );

	}
	return 0;
}
@END_OF_SOURCE_CODE
