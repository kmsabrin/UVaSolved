From apache@acm.uva.es Sun Oct 17 16:42:29 2004
Received: from acm.localnet (web.localnet [192.168.10.200])
	by acm.uva.es (8.11.6/8.11.6) with ESMTP id i9HEgTW06584
	for <judge@juez.localnet>; Sun, 17 Oct 2004 16:42:29 +0200
Received: by acm.localnet (Postfix)
	id 7080A10E65; Sun, 17 Oct 2004 16:42:37 +0200 (CEST)
Delivered-To: judge@acm.uva.es
Received: by acm.localnet (Postfix, from userid 81)
	id 6E32E10E58; Sun, 17 Oct 2004 16:42:37 +0200 (CEST)
To: judge@acm.uva.es
Subject: Problem 476
From: nobody@nobody.acm.uva.es
Reply-To: nobody@nobody.acm.uva.es
Message-Id: <20041017144237.6E32E10E58@acm.localnet>
Date: Sun, 17 Oct 2004 16:42:37 +0200 (CEST)

/* @JUDGE_ID: 34556CP 476 C++ "Submitted by Cd-Man's automatic submission tool ver 0.9" */
/** Submited via Valladolid ACM Online Judge Submit page v6.00 **/
/** IP: 202.80.160.52 - CRC: F0E693AE **/
/** Date: 2004-10-17 16:42:37 +0200 **/

@BEGIN_OF_SOURCE_CODE
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include<math.h>

#define E 0.000001

struct {
    char c;
    double cx, cy, r;
    double lx, by, rx, ty;
    double x1, y1, x2, y2, x3, y3;
}   type[10000];

double x, y;


double dist( double x1, double x2, double y1, double y2 )
{
	return sqrt( ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - y2 ) );
}

double area( double x1, double x2, double x3, double y1, double y2, double y3 )
{
	double a, b, c, s;
	a = dist( x1, x2, y1, y2 );
	b = dist( x2, x3, y2, y3 );
	c = dist( x1, x3, y1, y3 );
	s = ( a + b + c ) / 2.0;
	return sqrt ( s * ( s - a ) * ( s - b ) * ( s - c ) );
}

int inRect(int i)
{
	if ( fabs(x - type[i].lx) < E || x < type[i].lx || fabs(x - type[i].rx) < E || x > type[i].rx ||
	     fabs(y - type[i].by) < E || y < type[i].by || fabs(y - type[i].ty) < E || y > type[i].ty  )
	return 0;
	return 1;
}

int inCircle(int i)
{
	double a;
	a = dist( type[i].cx, x, type[i].cy, y );
	if( fabs(a - type[i].r) < E || a > type[i].r )
		return 0;
	return 1;
}

int intrian(int i)
{
	double a1, a2, a3, a4;
	a1 = area( type[i].x1, type[i].x2, x, type[i].y1, type[i].y2, y);
	a2 = area( type[i].x1, type[i].x3, x, type[i].y1, type[i].y3, y);
	a3 = area( type[i].x2, type[i].x3, x, type[i].y2, type[i].y3, y);
	a4 = area( type[i].x1, type[i].x2, type[i].x3, type[i].y1, type[i].y2, type[i].y3);
	if ( fabs( a1 + a2 + a3 - a4 ) < E )
		return 1;
	return 0;
}

int main()
{
	char s[1000], *p;
	int i, j, n, f, k;

//	freopen("a.in", "r", stdin);
	j = 0;
	while( gets( s ) )
	{
		if ( s[0] == '*' )
			break;
		if ( s[0] == 'r' )
		{
			type[j].c = 'r';
			p = strtok( s, " " );
			p = strtok( NULL, " " );
			type[j].lx = atof(p);
			p = strtok( NULL, " " );
			type[j].ty = atof(p);
			p = strtok( NULL, " " );
			type[j].rx = atof(p);
			p = strtok( NULL, " " );
			type[j].by = atof(p);
		}
		else if ( s[0] == 'c' )
		{
			type[j].c = 'c';
			p = strtok( s, " " );
			p = strtok( NULL, " " );
			type[j].cx = atof(p);
			p = strtok( NULL, " " );
			type[j].cy = atof(p);
			p = strtok( NULL, " " );
			type[j].r = atof(p);
		}
		else
		{
			type[j].c = 't';
			p = strtok( s, " " );
			p = strtok( NULL, " " );
			type[j].x1 = atof(p);
			p = strtok( NULL, " " );
			type[j].y1 = atof(p);
			p = strtok( NULL, " " );
			type[j].x2 = atof(p);
			p = strtok( NULL, " " );
			type[j].y2 = atof(p);
			p = strtok( NULL, " " );
			type[j].x3 = atof(p);
			p = strtok( NULL, " " );
			type[j].y3 = atof(p);
		}
		++j;
	}

	n = 1;
	while ( gets ( s ) )
	{
		p = strtok( s, "  ");
		x = atof(p);
		p = strtok( NULL, " " );
		y = atof(p);
		if ( fabs(x - 9999.9) < E && fabs(y - 9999.9) < E )
			break;
		f = 0;
		for ( i = 0; i < j; ++ i )
		{
			if ( type[i].c == 'r' )
				k = inRect(i);
			else if( type[i].c == 'c' )
				k = inCircle(i);
			else
				k = intrian(i);
			if ( k )
			{
				printf("Point %d is contained in figure %d\n", n, i + 1);
				f = 1;
			}
		}
		if(!f)
			printf("Point %d is not contained in any figure\n", n);
		++n;
	}
	return 0;
}
@END_OF_SOURCE_CODE
