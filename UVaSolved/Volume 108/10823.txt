From apache@acm.uva.es Sun Mar 20 18:55:49 2005
Received: from acm.localnet (web.localnet [192.168.10.200])
	by acm.uva.es (8.11.6/8.11.6) with ESMTP id j2KHtn427819
	for <judge@juez.localnet>; Sun, 20 Mar 2005 18:55:49 +0100
Received: by acm.localnet (Postfix)
	id A4CE3113C0; Sun, 20 Mar 2005 18:57:16 +0100 (CET)
Delivered-To: judge@acm.uva.es
Received: by acm.localnet (Postfix, from userid 81)
	id A2056113BF; Sun, 20 Mar 2005 18:57:16 +0100 (CET)
To: judge@acm.uva.es
Subject: Problem 10823
From: nobody@nobody.acm.uva.es
Reply-To: nobody@nobody.acm.uva.es
Message-Id: <20050320175716.A2056113BF@acm.localnet>
Date: Sun, 20 Mar 2005 18:57:16 +0100 (CET)

/* @JUDGE_ID: 34556CP 10823 C++ "" */
/** Submited via Valladolid ACM Online Judge Submit page v6.00 **/
/** IP: 202.80.160.60 - CRC: B54D67E4 **/
/** Date: 2005-03-20 18:57:16 +0100 **/

@BEGIN_OF_SOURCE_CODE
#include <stdio.h>

struct GeomObj {
	char c;
	int px, py, len;
	int r, g, b;
}	obj[101];

int OnCircle( int x, int y, int num )
{
	int h = obj[num].px, k = obj[num].py, r = obj[num].len;

	if ( ( ( x - h ) * ( x - h ) + ( y - k ) * ( y - k ) ) == r * r )
		return 1;

	return 0;
}

int InCircle( int x, int y, int num )
{
	int h = obj[num].px, k = obj[num].py, r = obj[num].len;

	if ( ( ( x - h ) * ( x - h ) + ( y - k ) * ( y - k ) ) < r * r )
		return 1;

	return 0;
}

int OnSquare( int x, int y, int num )
{	
	int side = obj[num].len;
	int llx = obj[num].px, lly = obj[num].py;
	int ulx = llx, uly = lly + side;
	int lrx = llx + side, lry = lly;
	int urx = llx + side, ury = lly + side; 

	if ( y >= lly && y <= uly && x == llx )
		return 1;
	if ( y >= lly && y <= uly && x == lrx )
		return 1;
	if ( x >= llx && x <= lrx && y == lly )
		return 1;
	if ( x >= llx && x <= lrx && y == uly )
		return 1;
	
	return 0;
}

int InSquare( int x, int y, int num )
{
	int side = obj[num].len;
	int llx = obj[num].px, lly = obj[num].py;
	int urx = llx + side, ury = lly + side; 

	if ( x > llx && x < urx && y > lly && y < ury )
		return 1;

	return 0;
}

int main()
{
	int i, j, t, n, p, x, y, sr, sg, sb, count, b, w, tc = 1;
	char tmp[11];
	//freopen( "a.in", "r", stdin );

	scanf( "%d", &t );

	while ( t-- )
	{
		scanf( "%d %d", &n, &p );

		for ( i = 0; i < n; ++i )
		{
			scanf( "%s %d %d %d %d %d %d", tmp, &obj[i].px, &obj[i].py, &obj[i].len,
												&obj[i].r, &obj[i].g, &obj[i].b );
			obj[i].c = tmp[0];
		}
	
		printf( "Case %d:\n", tc++ );
		for ( i = 0; i < p; ++i )
		{
			scanf( "%d %d", &x, &y );
			count = sr = sg = sb = 0;
			b = 0, w = 1;
			for ( j = 0; j < n; ++j )
			{
				if ( obj[j].c == 'C' )
				{
					if ( OnCircle( x, y, j ) )
					{
						b = 1;
						w = 0;
						break;
					}
					else if ( InCircle( x, y, j ) )
					{
						count++;
						sr += obj[j].r;
						sg += obj[j].g;
						sb += obj[j].b;
						w = 0;
					}
				}
				else
				{
					if ( OnSquare( x, y, j ) )
					{
						b = 1;
						w = 0;
						break;
					}
					else if ( InSquare( x, y, j ) )
					{
						count++;
						sr += obj[j].r;
						sg += obj[j].g;
						sb += obj[j].b;
						w = 0;
					}
				}
			}
			if ( b )
				printf( "(0, 0, 0)\n" );
			else if ( w )
				printf( "(255, 255, 255)\n" );
			else
				printf( "(%d, %d, %d)\n", ( 2 * sr + count ) / ( 2 * count ), 
				                          ( 2 * sg + count ) / ( 2 * count ), 
										  ( 2 * sb + count ) / ( 2 * count ) ); 
		}
	if ( t )
		printf( "\n" );
	}

	return 0;
}





@END_OF_SOURCE_CODE
